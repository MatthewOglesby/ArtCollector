{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","console","error","Feature","featuredResult","log","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","map","person","idx","key","displayname","image","src","baseimageurl","alt","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","disabled","prev","next","record","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","onSubmit","htmlFor","type","placeholder","onChange","target","length","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.092dec65.chunk.js","sourcesContent":["/**\r\n * This file features and exports all of your calls to the API\r\n * \r\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\r\n */\r\n export const BASE_URL = 'https://api.harvardartmuseums.org';\r\n export const KEY = 'apikey=6165dc6e-b87b-498c-bbd7-9b579349b875';\r\n \r\n /**\r\n  * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\r\n  */\r\n export async function fetchQueryResultsFromTermAndValue(term, value) {\r\n   try {\r\n     const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\r\n     const data = await response.json();\r\n \r\n     return data;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }\r\n \r\n /**\r\n  * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\r\n  */\r\n export async function fetchQueryResultsFromURL(url) {\r\n   try {\r\n     const response = await fetch(url);\r\n     const data = await response.json();\r\n \r\n     return data;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }\r\n \r\n /**\r\n  * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\r\n  * \r\n  * Then makes a call to the API, and returns the first page of results\r\n  */\r\n export async function fetchQueryResults({\r\n   century,\r\n   classification,\r\n   queryString,\r\n }) {\r\n   const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \r\n     century }&keyword=${ queryString }`;\r\n \r\n   try {\r\n     const response = await fetch(url);\r\n     const data = await response.json();\r\n \r\n     return data;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }\r\n \r\n /**\r\n  * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\r\n  */\r\n export async function fetchAllCenturies() {\r\n   if (localStorage.getItem('centuries')) {\r\n     return JSON.parse(localStorage.getItem('centuries'));\r\n   }\r\n \r\n   const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\r\n \r\n   try {\r\n     const response = await fetch(url);\r\n     const data = await response.json();\r\n     const records = data.records;\r\n \r\n     localStorage.setItem('centuries', JSON.stringify(records));\r\n \r\n     return records;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }\r\n \r\n /**\r\n  * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \r\n  */\r\n export async function fetchAllClassifications() {\r\n   if (localStorage.getItem('classifications')) {\r\n     return JSON.parse(localStorage.getItem('classifications'));\r\n   }\r\n \r\n   const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\r\n \r\n   try {\r\n     const response = await fetch(url);\r\n     const data = await response.json();\r\n     const records = data.records;\r\n \r\n     localStorage.setItem('classifications', JSON.stringify(records));\r\n \r\n     return records;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }","import React, { Fragment } from 'react';\r\n\r\n// Don't touch this import\r\nimport { fetchQueryResultsFromTermAndValue } from '../api';\r\n\r\n/**\r\n * We need a new component called Searchable which:\r\n * \r\n * Has a template like this:\r\n * \r\n * <span className=\"content\">\r\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\r\n * </span>\r\n *\r\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\r\n * \r\n * When someone clicks the anchor tag, you should:\r\n * \r\n * - preventDefault on the event\r\n * - call setIsLoading, set it to true\r\n * \r\n * Then start a try/catch/finally block:\r\n * \r\n * try:\r\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\r\n *  - send the result to setSearchResults (which will update the Preview component)\r\n * catch: \r\n *  - console.error the error\r\n * finally:\r\n *  - call setIsLoading, set it to false\r\n */\r\nconst Searchable = (props) => {\r\n    // this is deconstructing props\r\n  const {\r\n    searchTerm,\r\n    searchValue,\r\n    setIsLoading,\r\n    setSearchResults,\r\n  } = props\r\n\r\n  return <span className=\"content\">\r\n            <a href=\"#\" onClick={async (event) => {\r\n                event.preventDefault()\r\n                setIsLoading(true)\r\n\r\n\r\n                try {\r\n                    const results = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue)\r\n                    setSearchResults(results)\r\n                } catch {\r\n                    console.error()\r\n                } finally {\r\n                    setIsLoading(false)\r\n                }\r\n            }}>{searchValue}</a>\r\n        </span>\r\n}\r\n\r\n/**\r\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\r\n * \r\n * <main id=\"feature\"></main>\r\n * \r\n * And like this when one is:\r\n * \r\n * <main id=\"feature\">\r\n *   <div className=\"object-feature\">\r\n *     <header>\r\n *       <h3>OBJECT TITLE</h3>\r\n *       <h4>WHEN IT IS DATED</h4>\r\n *     </header>\r\n *     <section className=\"facts\">\r\n *       <span className=\"title\">FACT NAME</span>\r\n *       <span className=\"content\">FACT VALUE</span>\r\n *       <span className=\"title\">NEXT FACT NAME</span>\r\n *       <span className=\"content\">NEXT FACT VALUE</span>\r\n *     </section>\r\n *     <section className=\"photos\">\r\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\r\n *     </section>\r\n *   </div>\r\n * </main>\r\n * \r\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \r\n * technique, medium, dimensions, people, department, division, contact, creditline\r\n * \r\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\r\n * \r\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\r\n * \r\n * This component should be exported as default.\r\n */\r\nconst Feature = (props) => {\r\nconst {featuredResult} = props // this wil contain all the facts needed\r\nconsole.log(featuredResult)\r\n\r\n    if (!featuredResult) {\r\n        return <main id=\"feature\"></main>\r\n    }\r\n    const {\r\n        title,\r\n        dated,\r\n        images, // THIS IS AN ARRAY\r\n        primaryimageurl, // only use if making image or something clickable\r\n        description,\r\n        culture, // SEARCHABLE\r\n        style,\r\n        technique, // SEARCHABLE\r\n        medium, // SEARCHABLE\r\n        dimensions,\r\n        people, // SEARCHABLE -- person.displayname\r\n        department,\r\n        division,\r\n        contact,\r\n        creditline,\r\n    } = featuredResult || {}\r\n\r\n    return <main id=\"feature\">\r\n        <div className=\"object-feature\">\r\n            <header> \r\n                {/* could do featuredResults.title, but we deconstructed both into props */}\r\n                <h3>{title}</h3> \r\n                <h4>{dated}</h4>\r\n            </header>\r\n            <section className=\"facts\">\r\n                {/* <span className=\"title\">FACT NAME</span>\r\n                <span className=\"content\">FACT VALUE</span> */}\r\n                {\r\n                    description ?\r\n                        <Fragment>\r\n                            <span className=\"title\">Description</span>\r\n                            <span className=\"content\">{description}</span>\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    culture ?\r\n                        <Fragment>\r\n                            <span className=\"title\">Culture</span>\r\n                            <Searchable searchTerm=\"culture\" searchValue={culture} {...props} />\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    technique ?\r\n                        <Fragment>\r\n                            <span className=\"title\">Technique</span>\r\n                            <Searchable searchTerm=\"technique\" searchValue={technique} {...props} />\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    people ?\r\n                    people.map((person, idx) =>\r\n                        <Fragment key={idx}>\r\n                            <span className=\"title\">Person</span>\r\n                            <Searchable searchTerm=\"culture\" searchValue={person.displayname} {...props} />\r\n                        </Fragment>\r\n                        )\r\n                    : null\r\n                }\r\n                {\r\n                    department ?\r\n                        <Fragment>\r\n                            <span className=\"title\">Department</span>\r\n                            <span className=\"content\">{department}</span>\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    division ?\r\n                        <Fragment>\r\n                            <span className=\"title\">Department</span>\r\n                            <span className=\"content\">{division}</span>\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    contact ?\r\n                    <Fragment>\r\n                            <span className=\"title\">Contact</span>\r\n                            <span className=\"content\"><a href={contact}>{contact}</a></span>\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    creditline ?\r\n                    <Fragment>\r\n                            <span className=\"title\">Credit</span>\r\n                            <span className=\"content\">{creditline}</span>\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    style ?\r\n                        <Fragment>\r\n                            <span className=\"title\">style</span>\r\n                            <span className=\"content\">{style}</span>\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    medium ?\r\n                        <Fragment>\r\n                            <span className=\"title\">medium</span>\r\n                            <Searchable searchTerm=\"medium\" searchValue={medium} {...props} />\r\n                        </Fragment>\r\n                    : null\r\n                }\r\n                {\r\n                    dimensions ?\r\n                    <Fragment>\r\n                            <span className=\"title\">Culture</span>\r\n                            <span className=\"content\">{dimensions}</span>\r\n                        </Fragment>\r\n                    : null\r\n                }  \r\n            </section>\r\n            <section className=\"photos\">\r\n            {\r\n                    images ?\r\n                    images.map((image, idx) =>\r\n                        <Fragment key={idx}>\r\n                            <a href={primaryimageurl}><img src={image.baseimageurl} alt={image.description}  {...props} /></a>\r\n                        </Fragment>\r\n                        )\r\n                    : null\r\n                }\r\n                {/* {<img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />} \r\n                remember to map over these because they can be an array\r\n                \r\n                use image.baseimagurl for image URL\r\n                use image.creditline or image.description for alt\r\n                */}\r\n            </section>\r\n        </div>\r\n    {/* if no feature, return null */}\r\n    </main>\r\n}  \r\n\r\nexport default Feature;","import React from 'react';\r\n\r\n/**\r\n * Create and export a component called Loading which uses this static HTML template:\r\n * \r\n * <div id=\"loading\">\r\n *   <h2 className=\"message\">Searching...</h2>\r\n * </div>\r\n */\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div id=\"loading\">\r\n            <h2 className=\"message\">Searching...</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading","import React from 'react';\r\n\r\n/**\r\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\r\n * which are query urls.\r\n */\r\nimport { fetchQueryResultsFromURL } from '../api';\r\n\r\nconst Preview = (props) => {\r\n  /**\r\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\r\n   * and also destructure info and records from props.searchResults\r\n   * \r\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\r\n   */\r\n\r\n\r\n  /**\r\n   * Don't touch this function, it's good to go.\r\n   * \r\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\r\n   */\r\n\r\n   const {\r\n    setSearchResults,\r\n    setFeaturedResult,\r\n    setIsLoading,\r\n    searchResults: { info, records }\r\n  } = props\r\n\r\n  async function fetchPage(pageUrl) {\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const results = await fetchQueryResultsFromURL(pageUrl);\r\n      setSearchResults(results);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return <aside id=\"preview\">\r\n    <header className=\"pagination\">\r\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\r\n      <button \r\n        disabled={(!info.prev)} \r\n        className=\"previous\"\r\n        onClick={() => fetchPage(info.prev)}>Previous</button>\r\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\r\n      <button\r\n        disabled={(!info.next)}\r\n        className=\"next\"\r\n        onClick={() => fetchPage(info.next)}>Next</button>\r\n    </header>\r\n    <section className=\"results\">\r\n\r\n      \r\n      {/* {records.map(record) =>\r\n          return <div  \r\n            key={ index }\r\n            className=\"object-preview\"\r\n            onClick={(event) => {\r\n              event.preventDefault()\r\n              // set the featured result to be this record, using setFeaturedResult\r\n              setFeaturedResult(record)\r\n            }}>\r\n            { \r\n              // if  (record.primaryimageurl)<img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \r\n            }\r\n            {\r\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\r\n            }\r\n          </div>\r\n\r\n      } */}\r\n      {  records.map((record, idx) => {\r\n        return <div\r\n          key={idx}\r\n          className=\"object-preview\"\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            setFeaturedResult(record)\r\n          }}>\r\n          {record.primaryimageurl ? <img src={record.primaryimageurl} alt={record.description} /> : null}\r\n          {record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>}\r\n        </div>\r\n          })},\r\n\r\n\r\n\r\n    </section>\r\n  </aside>\r\n}\r\n\r\nexport default Preview;","import React, { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Don't touch these imports!\r\n */\r\nimport { \r\n  fetchAllCenturies,\r\n  fetchAllClassifications,\r\n  fetchQueryResults\r\n} from '../api';\r\n\r\nconst Search = (props) => {\r\n\r\n  // the props we passed in is setIsloading and setSearchResults\r\n   const { setIsLoading, setSearchResults } = props\r\n\r\n  setIsLoading()\r\n  // Make sure to destructure setIsLoading and setSearchResults from the props\r\n\r\n\r\n  /**\r\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\r\n   * our controlled inputs:\r\n   * \r\n   * centuryList, setCenturyList (default should be an empty array, [])\r\n   * classificationList, setClassificationList (default should be an empty array, [])\r\n   * queryString, setQueryString (default should be an empty string, '')\r\n   * century, setCentury (default should be the string 'any')\r\n   * classification, setClassification (default should be the string 'any')\r\n   */\r\n const [centuryList, setCenturyList] = useState([])\r\n const [classificationList, setClassificationList] = useState([])\r\n const [queryString, setQueryString] = useState(\"\")\r\n const [century, setCentury] = useState(\"any\")\r\n const [classification, setClassification] = useState(\"any\")\r\n\r\n\r\n\r\n  /**\r\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\r\n   * \r\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\r\n   * \r\n   * Make sure to console.error on caught errors from the API methods.\r\n   */\r\n  useEffect(() => {\r\n    // fetchAllCenturies()\r\n    // fetchAllClassifications()\r\n\r\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\r\n    .then(([centuries, classifications]) => {\r\n    setCenturyList(centuries)\r\n    setClassificationList(classifications)\r\n  }).catch(console.error)\r\n  }, []);\r\n\r\n  /**\r\n   * This is a form element, so we need to bind an onSubmit handler to it which:\r\n   * \r\n   * calls event.preventDefault()\r\n   * calls setIsLoading, set it to true\r\n   * \r\n   * then, in a try/catch/finally block:\r\n   * \r\n   * try to:\r\n   * - get the results from fetchQueryResults({ century, classification, queryString })\r\n   * HINT: Look at your state\r\n   * - pass them to setSearchResults\r\n   * \r\n   * catch: error to console.error\r\n   * \r\n   * finally: call setIsLoading, set it to false\r\n   */\r\n   \r\n\r\n  return <form id=\"search\" onSubmit={async (event) => {\r\n    event.preventDefault()\r\n    setIsLoading(true)\r\n\r\n    try {\r\n      const results = await fetchQueryResults({queryString, century, classification})\r\n      setSearchResults(results)\r\n    } catch (error){\r\n      console.error(error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }}>\r\n    <fieldset>\r\n      <label htmlFor=\"keywords\">Query</label>\r\n      <input \r\n        id=\"keywords\" \r\n        type=\"text\" \r\n        placeholder=\"enter keywords...\" \r\n        value={queryString} \r\n        onChange={(event) => setQueryString(event.target.value)}/>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\r\n      <select \r\n        name=\"classification\"\r\n        id=\"select-classification\"\r\n        value={classification} \r\n        onChange={(event) => setClassification(event.target.value)}>\r\n        <option value=\"any\">Any</option>\r\n        {\r\n        \r\n        classificationList.map((classification, idx) => {\r\n          return <option key={`${idx}:${classification.name}`} value={classification.name}>{classification.name}</option>\r\n          // <option value=\"Sculpture\">Sculpture</option>\r\n        })\r\n        \r\n        }\r\n      </select>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\r\n      <select \r\n        name=\"century\" \r\n        id=\"select-century\"\r\n        value={century} \r\n        onChange={(event) => setCentury(event.target.value)}>\r\n        <option value=\"any\">Any</option>\r\n        {\r\n           centuryList.map((century, idx) =>\r\n           <option key={`${idx}:${century.name}`} value={century.name}>\r\n             {century.name}\r\n           </option>\r\n         )\r\n        }\r\n      </select>\r\n     </fieldset>\r\n    <button>SEARCH</button>\r\n  </form>\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\n/**\r\n * Create/export a component called Title which uses this static HTML as the template:\r\n * \r\n * <div id=\"title\">\r\n *   <h1>\r\n *     The Art Collector\r\n *   </h1>\r\n *   <h5>\r\n *     Search the Harvard Art Museums' Private Collections\r\n *   </h5>\r\n * </div>\r\n */\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div id=\"title\">\r\n            <h1>The Art Collector</h1>\r\n            <h5>Search the Harvard Art Museums' Private Collections</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// These imports won't work until you fix ./components/index.js\r\nimport {\r\n  Feature,\r\n  Loading,\r\n  Preview,\r\n  Search,\r\n  Title\r\n} from './components';\r\n\r\n\r\nconst App = () => {\r\n  /**\r\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\r\n   * be made here, so create state pairs using useState() for:\r\n   * \r\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\r\n   * featuredResult, setFeaturedResult (default should be null)\r\n   * isLoading, setIsLoading (default should be false)\r\n   */\r\n\r\n  const [searchResults, setSearchResults] = useState({info: {}, records: []})\r\n  // in our beginning state searchResults = { info: {}, records: []}\r\n  // to update setSearchResults({info: {0: 'hi'}, ...records})\r\n  const [featuredResult, setFeaturedResult] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n\r\n  return <div className=\"app\">\r\n    {/* <Title /> is static, doesn't need any props */}\r\n    <Title />\r\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\r\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> \r\n    {/* TUESDAY HW <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\r\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\r\n    {/* THURS CLASS <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\r\n    <Feature  featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\r\n    {/* <Loading /> is static, but should only render when isLoading is true */}\r\n    {/* use a ternary and render null if isLoading is false */}\r\n    {/* ternary explanation: statementToCheck ? what to return if true : what to return if false */}\r\n    { isLoading ? <Loading /> : null}\r\n    \r\n  </div>\r\n}\r\n\r\n/**\r\n * Boostrap the <App /> component into the '#app' element in the DOM,\r\n * using ReactDOM.render();\r\n */\r\nReactDOM.render(<App />, document.getElementById(\"app\"))"],"sourceRoot":""}